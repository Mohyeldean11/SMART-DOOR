
smart_door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00000aca  00000b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000b4  008000b4  00000bb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fee  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d37  00000000  00000000  00002e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155c  00000000  00000000  00003b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  000050cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000938  00000000  00000000  0000553c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016ae  00000000  00000000  00005e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00007522  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__vector_4>
  14:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 eb       	ldi	r26, 0xB4	; 180
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3c       	cpi	r26, 0xC2	; 194
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 02 	call	0x594	; 0x594 <main>
  8a:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INITIALIZE_ALL>:
#include "../HAL/LCD/LCD_INTERFACE.h"


/*a function to initialize all the used drivers in the application*/
void INITIALIZE_ALL(void)
{
  92:	cf 93       	push	r28
	/*INITIALIZING THE DOOR,LCD,KEYPAD AND DOOR LCDS*/
	DoorInit();
  94:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DoorInit>
	LCD_INIT();
  98:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_INIT>
	KeyPad_Init();
  9c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <KeyPad_Init>
	PinConfig(PORTC,pin1|pin2,output);
  a0:	42 e0       	ldi	r20, 0x02	; 2
  a2:	66 e0       	ldi	r22, 0x06	; 6
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	/*LOADING THE MEMORY WITH THE DOOR PIN*/
	for (uint8 loop=0;loop<4;loop++)
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	0c c0       	rjmp	.+24     	; 0xc6 <INITIALIZE_ALL+0x34>
	{
		EEPROM_Write(loop,'1'+loop);
  ae:	61 e3       	ldi	r22, 0x31	; 49
  b0:	6c 0f       	add	r22, r28
  b2:	8c 2f       	mov	r24, r28
  b4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <EEPROM_Write>
		Timer2DelayNoInt(8);
  b8:	68 e0       	ldi	r22, 0x08	; 8
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Timer2DelayNoInt>
	DoorInit();
	LCD_INIT();
	KeyPad_Init();
	PinConfig(PORTC,pin1|pin2,output);
	/*LOADING THE MEMORY WITH THE DOOR PIN*/
	for (uint8 loop=0;loop<4;loop++)
  c4:	cf 5f       	subi	r28, 0xFF	; 255
  c6:	c4 30       	cpi	r28, 0x04	; 4
  c8:	90 f3       	brcs	.-28     	; 0xae <INITIALIZE_ALL+0x1c>
	{
		EEPROM_Write(loop,'1'+loop);
		Timer2DelayNoInt(8);
	}
	
}
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <BUZZERON>:

/*a function to turn on the buzzer*/
void BUZZERON(void)
{
	PinConfig(PORTC,pin0,output);
  ce:	42 e0       	ldi	r20, 0x02	; 2
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	PinWrite(PORTC,pin0,HIGH);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
  e2:	08 95       	ret

000000e4 <BUZZEROFF>:
}

/*a function to turn off the buzzer*/
void BUZZEROFF(void)
{
	PinConfig(PORTC,pin0,output);
  e4:	42 e0       	ldi	r20, 0x02	; 2
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	PinWrite(PORTC,pin0,LOW);
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
  f8:	08 95       	ret

000000fa <AppWorking>:
}

/*the algorithm for the whole application*/
void AppWorking(void)
{
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	/*a flag to know how many numbers are right in the entered pin*/
	uint8 PWvalue=0;
	/*a loop value to enter the pin */
	uint8 PWloop=0;
	/*checking if the IR Sensor is off or on*/
	if(IR_GET_READ())
 100:	0e 94 8e 01 	call	0x31c	; 0x31c <IR_GET_READ>
 104:	88 23       	and	r24, r24
 106:	09 f4       	brne	.+2      	; 0x10a <AppWorking+0x10>
 108:	bd c0       	rjmp	.+378    	; 0x284 <AppWorking+0x18a>
	{
		/*opening the lcd display*/
		LCD_ON();
 10a:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_ON>
		/*clearing the previouse display*/
		LCD_Clear();
 10e:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_Clear>
		/*go to the middle of the screen*/
		LCD_GOTO_XY(LCD_ROW0,LCD_COL3);
 112:	63 e0       	ldi	r22, 0x03	; 3
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_GOTO_XY>
		/*asking for the pw*/
		LCD_SEND_STRING("ENTER PW");
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_SEND_STRING>
		/*getting the pw */
		LCD_GOTO_XY(LCD_ROW1,LCD_COL0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_GOTO_XY>
	/*a flag to know how many times the pin was wrong*/
	static uint8 wrongPW=0;
	/*a flag to know how many numbers are right in the entered pin*/
	uint8 PWvalue=0;
	/*a loop value to enter the pin */
	uint8 PWloop=0;
 12a:	c0 e0       	ldi	r28, 0x00	; 0
	/*a value to carry the pressed keypad key*/
	uint8 keypadValue=0;
	/*a flag to know how many times the pin was wrong*/
	static uint8 wrongPW=0;
	/*a flag to know how many numbers are right in the entered pin*/
	uint8 PWvalue=0;
 12c:	10 e0       	ldi	r17, 0x00	; 0
		/*asking for the pw*/
		LCD_SEND_STRING("ENTER PW");
		/*getting the pw */
		LCD_GOTO_XY(LCD_ROW1,LCD_COL0);
		/*a loop to get the 4pin digits*/
		while(PWloop<4)
 12e:	10 c0       	rjmp	.+32     	; 0x150 <AppWorking+0x56>
		{
			/*getting the pressed key*/
			keypadValue=KeyPad_Work();
 130:	0e 94 05 02 	call	0x40a	; 0x40a <KeyPad_Work>
 134:	d8 2f       	mov	r29, r24
			/*displaying the pressed key on the screen*/
			LCD_SendChar(keypadValue);
 136:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_SendChar>
			/*reading the targeted pw from the memory*/
			EEPROM_READ(PWloop,memoryRead);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	8c 2f       	mov	r24, r28
 140:	0e 94 05 04 	call	0x80a	; 0x80a <EEPROM_READ>
			/*comparing the pin in the memory with the entered pin*/
			if (*(memoryRead)==keypadValue)
 144:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 148:	d8 13       	cpse	r29, r24
 14a:	01 c0       	rjmp	.+2      	; 0x14e <AppWorking+0x54>
			{
				/*iterating the pw value if the pressed key was like the memory*/
				PWvalue++;
 14c:	1f 5f       	subi	r17, 0xFF	; 255
			}
			PWloop++;
 14e:	cf 5f       	subi	r28, 0xFF	; 255
		/*asking for the pw*/
		LCD_SEND_STRING("ENTER PW");
		/*getting the pw */
		LCD_GOTO_XY(LCD_ROW1,LCD_COL0);
		/*a loop to get the 4pin digits*/
		while(PWloop<4)
 150:	c4 30       	cpi	r28, 0x04	; 4
 152:	70 f3       	brcs	.-36     	; 0x130 <AppWorking+0x36>
				PWvalue++;
			}
			PWloop++;
		}
			/*if the memory was correct*/
			if (PWvalue==4)
 154:	14 30       	cpi	r17, 0x04	; 4
 156:	a9 f5       	brne	.+106    	; 0x1c2 <AppWorking+0xc8>
			{
				/*turning on the green light and off the red light*/
				PinWrite(PORTC,pin1,HIGH);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
				PinWrite(PORTC,pin2,LOW);
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	64 e0       	ldi	r22, 0x04	; 4
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
				/*clearing the lcd*/
				LCD_Clear();
 16c:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_Clear>
				LCD_GOTO_XY(LCD_ROW0,LCD_COL0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_GOTO_XY>
				/*display a greeting message*/
				LCD_SEND_STRING("WELCOME MOHIE !");
 178:	89 e6       	ldi	r24, 0x69	; 105
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_SEND_STRING>
				/*opening the door*/
				DoorOpen();
 180:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DoorOpen>
				/*waiting for the person to enter the door*/
				while(IR_GET_READ());
 184:	0e 94 8e 01 	call	0x31c	; 0x31c <IR_GET_READ>
 188:	81 11       	cpse	r24, r1
 18a:	fc cf       	rjmp	.-8      	; 0x184 <AppWorking+0x8a>
				/*display a closing message */
				LCD_Clear();
 18c:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_Clear>
				LCD_GOTO_XY(LCD_ROW0,LCD_COL0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_GOTO_XY>
				LCD_SEND_STRING("CLOSING !!");
 198:	89 e7       	ldi	r24, 0x79	; 121
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_SEND_STRING>
				/*turning on the red light and off the green light*/
				PinWrite(PORTC,pin1,LOW);
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
				PinWrite(PORTC,pin2,HIGH);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	64 e0       	ldi	r22, 0x04	; 4
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
				/*closing the door*/
				DoorClose();
 1b4:	0e 94 77 01 	call	0x2ee	; 0x2ee <DoorClose>
				/*clearing the display*/
				LCD_Clear();
 1b8:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_Clear>
				LCD_OFF();
 1bc:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_OFF>
 1c0:	6c c0       	rjmp	.+216    	; 0x29a <AppWorking+0x1a0>
			}
			/*if pw is wrong*/
			else if(PWvalue<4)
 1c2:	14 30       	cpi	r17, 0x04	; 4
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <AppWorking+0xce>
 1c6:	69 c0       	rjmp	.+210    	; 0x29a <AppWorking+0x1a0>
			{
				/*iterating the trials of the entered pin*/
				wrongPW++;
 1c8:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__data_end>
				/*display a wrong pin message*/
				LCD_Clear();	
 1d2:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_Clear>
				LCD_GOTO_XY(LCD_ROW0,LCD_COL3);
 1d6:	63 e0       	ldi	r22, 0x03	; 3
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_GOTO_XY>
				LCD_SEND_STRING("WRONG PIN");
 1de:	84 e8       	ldi	r24, 0x84	; 132
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_SEND_STRING>
				/*delaying for 2 seconds*/
				Timer2DelayNoInt(2000);
 1e6:	60 ed       	ldi	r22, 0xD0	; 208
 1e8:	77 e0       	ldi	r23, 0x07	; 7
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Timer2DelayNoInt>
				/*if the pin was wrong 3 times*/
				if (wrongPW>=3)
 1f2:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	08 f4       	brcc	.+2      	; 0x1fc <AppWorking+0x102>
 1fa:	4f c0       	rjmp	.+158    	; 0x29a <AppWorking+0x1a0>
				{
					/*turning on the buzzer*/
					BUZZERON();				
 1fc:	0e 94 67 00 	call	0xce	; 0xce <BUZZERON>
					/*display a NO MORE TRYING message*/	
					LCD_Clear();
 200:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_Clear>
					LCD_GOTO_XY(LCD_ROW0,LCD_COL0);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_GOTO_XY>
					LCD_SEND_STRING("NO MORE TRYING !!");
 20c:	8e e8       	ldi	r24, 0x8E	; 142
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_SEND_STRING>
					/*make sure the red light is on*/
					PinWrite(PORTC,pin2,HIGH);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	64 e0       	ldi	r22, 0x04	; 4
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
					/*flashing the buzzer*/
					BUZZEROFF();
 21e:	0e 94 72 00 	call	0xe4	; 0xe4 <BUZZEROFF>
					Timer2DelayNoInt(500);
 222:	64 ef       	ldi	r22, 0xF4	; 244
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Timer2DelayNoInt>
					BUZZERON();
 22e:	0e 94 67 00 	call	0xce	; 0xce <BUZZERON>
					Timer2DelayNoInt(500);			
 232:	64 ef       	ldi	r22, 0xF4	; 244
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Timer2DelayNoInt>
					BUZZEROFF();
 23e:	0e 94 72 00 	call	0xe4	; 0xe4 <BUZZEROFF>
					Timer2DelayNoInt(500);
 242:	64 ef       	ldi	r22, 0xF4	; 244
 244:	71 e0       	ldi	r23, 0x01	; 1
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Timer2DelayNoInt>
					BUZZERON();
 24e:	0e 94 67 00 	call	0xce	; 0xce <BUZZERON>
					Timer2DelayNoInt(500);
 252:	64 ef       	ldi	r22, 0xF4	; 244
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Timer2DelayNoInt>
					BUZZEROFF();
 25e:	0e 94 72 00 	call	0xe4	; 0xe4 <BUZZEROFF>
					Timer2DelayNoInt(500);
 262:	64 ef       	ldi	r22, 0xF4	; 244
 264:	71 e0       	ldi	r23, 0x01	; 1
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Timer2DelayNoInt>
					BUZZERON();
 26e:	0e 94 67 00 	call	0xce	; 0xce <BUZZERON>
					/*turning off the buzzer*/						
					BUZZEROFF();
 272:	0e 94 72 00 	call	0xe4	; 0xe4 <BUZZEROFF>
					/*clearing the  screen*/
					LCD_Clear();
 276:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_Clear>
					/*reseting the pw flag*/
					wrongPW=0;	
 27a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
					/*turning the lcd*/
					LCD_OFF();
 27e:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_OFF>
 282:	0b c0       	rjmp	.+22     	; 0x29a <AppWorking+0x1a0>
				}
			}
	}
	/*if no one infront of the door*/
	else if (IR_GET_READ()==0)
 284:	0e 94 8e 01 	call	0x31c	; 0x31c <IR_GET_READ>
 288:	81 11       	cpse	r24, r1
 28a:	07 c0       	rjmp	.+14     	; 0x29a <AppWorking+0x1a0>
	{
				/*turning off the lcd*/
				LCD_OFF();
 28c:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_OFF>
				/*turning on the red led*/
				PinWrite(PORTC,pin2,HIGH);
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	64 e0       	ldi	r22, 0x04	; 4
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	}
	
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	08 95       	ret

000002a2 <DoorInit>:
DoorStatus DoorInit(void)
{
	/*creating an error flag*/
	uint8 Errorflag=DoorOK;
	/*initializing the timer delay*/
	Timer2_1ms_Init();
 2a2:	0e 94 aa 04 	call	0x954	; 0x954 <Timer2_1ms_Init>
	/*initializing the pwm generator*/
	PwmInit(fastPwm,_256_PRESCALER);
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 22 04 	call	0x844	; 0x844 <PwmInit>
	/*setting the door to its initial state*/
	DoorPosition=_0degrees;
 2ae:	83 e1       	ldi	r24, 0x13	; 19
 2b0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <DoorPosition>
	/*updating the servo motor with the position*/
	PwmDuty(DoorPosition);
 2b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <DoorPosition>
 2b8:	0e 94 4b 04 	call	0x896	; 0x896 <PwmDuty>
	/*returning the function status*/
	return Errorflag;
}
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret

000002c0 <DoorOpen>:

/*a function to open the door*/
DoorStatus DoorOpen(void)
{
	/*creating an error flag*/
	uint8 Errorflag=DoorOpenError;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
	
	/*rechecking if the door is actually closed*/
	//uint8 DoorValue=_0degrees;
	
	/*decrementing the pwm to open the door from 0 to 180*/
	while(DoorPosition<=_180degrees)
 2c2:	10 c0       	rjmp	.+32     	; 0x2e4 <DoorOpen+0x24>
	{
		/*updating the error flag to ok*/
		Errorflag=DoorOK;
		/*updating the servo motor with the position*/
		PwmDuty(DoorPosition);
 2c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <DoorPosition>
 2c8:	0e 94 4b 04 	call	0x896	; 0x896 <PwmDuty>
		/*delaying*/
		Timer2_delay_ms(50);
 2cc:	62 e3       	ldi	r22, 0x32	; 50
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Timer2_delay_ms>
		/*incrementing the duty cycle*/
		DoorPosition++;
 2d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <DoorPosition>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <DoorPosition>
	
	/*decrementing the pwm to open the door from 0 to 180*/
	while(DoorPosition<=_180degrees)
	{
		/*updating the error flag to ok*/
		Errorflag=DoorOK;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
	
	/*rechecking if the door is actually closed*/
	//uint8 DoorValue=_0degrees;
	
	/*decrementing the pwm to open the door from 0 to 180*/
	while(DoorPosition<=_180degrees)
 2e4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <DoorPosition>
 2e8:	9e 37       	cpi	r25, 0x7E	; 126
 2ea:	60 f3       	brcs	.-40     	; 0x2c4 <DoorOpen+0x4>
		/*incrementing the duty cycle*/
		DoorPosition++;
	}
	/*returning the function status*/	
	return Errorflag;
}
 2ec:	08 95       	ret

000002ee <DoorClose>:
/*a function to close the door*/
DoorStatus DoorClose(void)
{
	/*creating an error flag*/
	uint8 Errorflag=DoorCloseError;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
	
	/*rechecking if the door is actually opened*/
	//uint8 DoorValue=_180degrees;
	
	/*decrementing the pwm to close the door from 180 to 0*/
	while(DoorPosition>=_0degrees)
 2f0:	10 c0       	rjmp	.+32     	; 0x312 <DoorClose+0x24>
	{
		/*updating the error flag to ok*/
		Errorflag=DoorOK;
		/*updating the servo motor with the position*/
		PwmDuty(DoorPosition);
 2f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <DoorPosition>
 2f6:	0e 94 4b 04 	call	0x896	; 0x896 <PwmDuty>
		/*delaying*/
		Timer2_delay_ms(50);
 2fa:	62 e3       	ldi	r22, 0x32	; 50
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Timer2_delay_ms>
		/*decrementing the duty cycle*/
		DoorPosition--;
 306:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <DoorPosition>
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <DoorPosition>
	
	/*decrementing the pwm to close the door from 180 to 0*/
	while(DoorPosition>=_0degrees)
	{
		/*updating the error flag to ok*/
		Errorflag=DoorOK;
 310:	80 e0       	ldi	r24, 0x00	; 0
	
	/*rechecking if the door is actually opened*/
	//uint8 DoorValue=_180degrees;
	
	/*decrementing the pwm to close the door from 180 to 0*/
	while(DoorPosition>=_0degrees)
 312:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <DoorPosition>
 316:	93 31       	cpi	r25, 0x13	; 19
 318:	60 f7       	brcc	.-40     	; 0x2f2 <DoorClose+0x4>
		/*decrementing the duty cycle*/
		DoorPosition--;
	}
	/*returning the function status*/
	return Errorflag;	
 31a:	08 95       	ret

0000031c <IR_GET_READ>:
#include "../../UTILITIES/DataTypes.h"
#include "../../MCAL/GPIO/DIO_INTERFACE.h"
#include "IR_INTERFACE.h"
/*a function to read the IR VALUE*/
uint8 IR_GET_READ(void)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	1f 92       	push	r1
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
	/*creating a value to detect obstacles*/
	uint8 readValue='\0';
 326:	19 82       	std	Y+1, r1	; 0x01
	/*configuring the input pin for the mcu*/
	PinConfig(IR_PORT,IR_PIN,input_float);
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	60 e8       	ldi	r22, 0x80	; 128
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	
	/*checking if there're any obstacles*/
	PinRead(IR_PORT,IR_PIN,&readValue);
 332:	ae 01       	movw	r20, r28
 334:	4f 5f       	subi	r20, 0xFF	; 255
 336:	5f 4f       	sbci	r21, 0xFF	; 255
 338:	60 e8       	ldi	r22, 0x80	; 128
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 a6 03 	call	0x74c	; 0x74c <PinRead>
	/*returning the read value*/
	return readValue;	
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	0f 90       	pop	r0
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <KeyPad_GetKey>:
	return pressedkey;
}

/*a function to get the pressed key with debouncing fixations*/
static uint8 KeyPad_GetKey(void)
{
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
	/*assigning the pressed key to the dummy value at first*/
	uint8 PressedKey=KeyPad_NoPressed;
	/*creating a read flag to check for the key that was pressed*/
	uint8 *readValue='\0';
	/*iterating over the columns*/
	for (uint8 columnum=0;columnum<KeyPadCol;columnum++)
 356:	d0 e0       	ldi	r29, 0x00	; 0
 358:	42 c0       	rjmp	.+132    	; 0x3de <KeyPad_GetKey+0x94>
	{
		/*changing the index column to low to check which row index will be low state*/
		PinWrite(KEYPAD_COL_PORT,ColumARRAY[columnum],LOW);
 35a:	ed 2e       	mov	r14, r29
 35c:	f1 2c       	mov	r15, r1
 35e:	f7 01       	movw	r30, r14
 360:	e0 55       	subi	r30, 0x50	; 80
 362:	ff 4f       	sbci	r31, 0xFF	; 255
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	60 81       	ld	r22, Z
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
		/*iterating over the rows*/
		for(uint8 rownum=0;rownum<KeyPadRow;rownum++)
 36e:	c0 e0       	ldi	r28, 0x00	; 0
 370:	2b c0       	rjmp	.+86     	; 0x3c8 <KeyPad_GetKey+0x7e>
		{
			/*reading every row index to know which key was pressed after matching the row and the columns*/
			PinRead(KEYPAD_ROW_PORT,RowARRAY[rownum],readValue);
 372:	0c 2f       	mov	r16, r28
 374:	10 e0       	ldi	r17, 0x00	; 0
 376:	f8 01       	movw	r30, r16
 378:	e4 55       	subi	r30, 0x54	; 84
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	60 81       	ld	r22, Z
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 a6 03 	call	0x74c	; 0x74c <PinRead>
			if(*(readValue)==LOW)
 388:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 38c:	81 11       	cpse	r24, r1
 38e:	1b c0       	rjmp	.+54     	; 0x3c6 <KeyPad_GetKey+0x7c>
			{
				/*assigning the pressed key value with the row number and the column number*/
				PressedKey=keypadarr[rownum][columnum];
 390:	c8 01       	movw	r24, r16
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	80 0f       	add	r24, r16
 398:	91 1f       	adc	r25, r17
 39a:	80 56       	subi	r24, 0x60	; 96
 39c:	9f 4f       	sbci	r25, 0xFF	; 255
 39e:	fc 01       	movw	r30, r24
 3a0:	ee 0d       	add	r30, r14
 3a2:	ff 1d       	adc	r31, r15
 3a4:	c0 81       	ld	r28, Z
				/*busy waiting until the key is not pressed anymore*/
				while(*(readValue)==LOW)
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <KeyPad_GetKey+0x70>
				{
					PinRead(KEYPAD_ROW_PORT,RowARRAY[rownum],readValue);
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	f8 01       	movw	r30, r16
 3ae:	e4 55       	subi	r30, 0x54	; 84
 3b0:	ff 4f       	sbci	r31, 0xFF	; 255
 3b2:	60 81       	ld	r22, Z
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 a6 03 	call	0x74c	; 0x74c <PinRead>
			if(*(readValue)==LOW)
			{
				/*assigning the pressed key value with the row number and the column number*/
				PressedKey=keypadarr[rownum][columnum];
				/*busy waiting until the key is not pressed anymore*/
				while(*(readValue)==LOW)
 3ba:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 3be:	99 23       	and	r25, r25
 3c0:	99 f3       	breq	.-26     	; 0x3a8 <KeyPad_GetKey+0x5e>
				{
					PinRead(KEYPAD_ROW_PORT,RowARRAY[rownum],readValue);
				}
				/*returning the pressed key from the function*/
				return PressedKey;
 3c2:	8c 2f       	mov	r24, r28
 3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <KeyPad_GetKey+0x9c>
	for (uint8 columnum=0;columnum<KeyPadCol;columnum++)
	{
		/*changing the index column to low to check which row index will be low state*/
		PinWrite(KEYPAD_COL_PORT,ColumARRAY[columnum],LOW);
		/*iterating over the rows*/
		for(uint8 rownum=0;rownum<KeyPadRow;rownum++)
 3c6:	cf 5f       	subi	r28, 0xFF	; 255
 3c8:	c4 30       	cpi	r28, 0x04	; 4
 3ca:	98 f2       	brcs	.-90     	; 0x372 <KeyPad_GetKey+0x28>
				/*returning the pressed key from the function*/
				return PressedKey;
			}
		}
		/*reActivating the column index to high and checking for the next one*/
		PinWrite(KEYPAD_COL_PORT,ColumARRAY[columnum],HIGH);
 3cc:	f7 01       	movw	r30, r14
 3ce:	e0 55       	subi	r30, 0x50	; 80
 3d0:	ff 4f       	sbci	r31, 0xFF	; 255
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	60 81       	ld	r22, Z
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*assigning the pressed key to the dummy value at first*/
	uint8 PressedKey=KeyPad_NoPressed;
	/*creating a read flag to check for the key that was pressed*/
	uint8 *readValue='\0';
	/*iterating over the columns*/
	for (uint8 columnum=0;columnum<KeyPadCol;columnum++)
 3dc:	df 5f       	subi	r29, 0xFF	; 255
 3de:	d3 30       	cpi	r29, 0x03	; 3
 3e0:	08 f4       	brcc	.+2      	; 0x3e4 <KeyPad_GetKey+0x9a>
 3e2:	bb cf       	rjmp	.-138    	; 0x35a <KeyPad_GetKey+0x10>
		}
		/*reActivating the column index to high and checking for the next one*/
		PinWrite(KEYPAD_COL_PORT,ColumARRAY[columnum],HIGH);
	}
	/*if no key was pressed the function will return the dummy value as it was initialized at the beginning*/
	return PressedKey;
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	ff 90       	pop	r15
 3f0:	ef 90       	pop	r14
 3f2:	08 95       	ret

000003f4 <KeyPad_Init>:

/*a function to initialize the keypad*/
void KeyPad_Init(void)
{
	/*configuring the rows to be all pullups high*/
	PinConfig(KEYPAD_ROW_PORT,KEYPAD_ROW1|KEYPAD_ROW2|KEYPAD_ROW3|KEYPAD_ROW4,input_pullup);
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	6f e0       	ldi	r22, 0x0F	; 15
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	/*configuring the columns to be all output high*/
	PinConfig(KEYPAD_COL_PORT,KEYPAD_COL1|KEYPAD_COL2|KEYPAD_COL3,output);
 3fe:	42 e0       	ldi	r20, 0x02	; 2
 400:	60 e7       	ldi	r22, 0x70	; 112
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
 408:	08 95       	ret

0000040a <KeyPad_Work>:
	/*creating a flag for the keypad and assigning it with the dummy value*/
	uint8 pressedkey=KeyPad_NoPressed;
	do 
	{
		/*checking if there's any key pressed or not*/
		pressedkey=KeyPad_GetKey();
 40a:	0e 94 a5 01 	call	0x34a	; 0x34a <KeyPad_GetKey>
	/*polling over the keypad buttons waiting to be pressed*/	
	} while (pressedkey==KeyPad_NoPressed);
 40e:	8f 3f       	cpi	r24, 0xFF	; 255
 410:	e1 f3       	breq	.-8      	; 0x40a <KeyPad_Work>
	
	/*returning the key that was pressed*/
	return pressedkey;
}
 412:	08 95       	ret

00000414 <LCD_SEND_COMMAND>:
#include "LCD_INTERFACE.h"


/*internal function to send COMMAND to the LCD*/
static void LCD_SEND_COMMAND(uint8 COMMAND)
{
 414:	cf 93       	push	r28
 416:	c8 2f       	mov	r28, r24
	/*INITIALIZING THE INSTRUCTION PINS AND SETTING THEM TO LOW*/
	PinConfig(LCD_INST_PORT,LCD_ENABLE_PIN|LCD_RW_PIN|LCD_RS_PIN,output);	
 418:	42 e0       	ldi	r20, 0x02	; 2
 41a:	60 ee       	ldi	r22, 0xE0	; 224
 41c:	82 e0       	ldi	r24, 0x02	; 2
 41e:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	PinConfig(LCD_DATA_PORT,LCD_DATA_BYTE,output);
 422:	42 e0       	ldi	r20, 0x02	; 2
 424:	6f ef       	ldi	r22, 0xFF	; 255
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	/*resetting the data pins at the beginning*/
	PinWrite(LCD_DATA_PORT,LCD_DATA_BYTE,LOW);
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	6f ef       	ldi	r22, 0xFF	; 255
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*SETTING THE RS PIN TO BE A COMMAND*/
	PinWrite(LCD_INST_PORT,LCD_RS_PIN,LOW);
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	60 e2       	ldi	r22, 0x20	; 32
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*SETTING THE R/W PIN TO BE WRITE*/
	PinWrite(LCD_INST_PORT,LCD_RW_PIN,LOW);
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	60 e4       	ldi	r22, 0x40	; 64
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*WRITING ON THE DATA PITS*/
	PinWrite(LCD_DATA_PORT,COMMAND,HIGH);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	6c 2f       	mov	r22, r28
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*SENDING AN ENABLE PULSE*/
	PinWrite(LCD_INST_PORT,LCD_ENABLE_PIN,HIGH);
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	60 e8       	ldi	r22, 0x80	; 128
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*DELAYING FOR 2ms*/
	Timer2_delay_ms(3);
 45e:	63 e0       	ldi	r22, 0x03	; 3
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Timer2_delay_ms>
	PinWrite(LCD_INST_PORT,LCD_ENABLE_PIN,LOW);
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	60 e8       	ldi	r22, 0x80	; 128
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>

}
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <LCD_SEND_DATA>:

/*internal function to send DATA to the LCD*/
static void LCD_SEND_DATA(uint8 DATABITE)
{
 478:	cf 93       	push	r28
 47a:	c8 2f       	mov	r28, r24
	/*INITIALIZING THE INSTRUCTION PINS*/
	PinConfig(LCD_INST_PORT,LCD_ENABLE_PIN|LCD_RW_PIN|LCD_RS_PIN,output);
 47c:	42 e0       	ldi	r20, 0x02	; 2
 47e:	60 ee       	ldi	r22, 0xE0	; 224
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	PinConfig(LCD_DATA_PORT,LCD_DATA_BYTE,output);
 486:	42 e0       	ldi	r20, 0x02	; 2
 488:	6f ef       	ldi	r22, 0xFF	; 255
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	/*resetting the data pins at the beginning*/
	PinWrite(LCD_DATA_PORT,LCD_DATA_BYTE,LOW);
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	6f ef       	ldi	r22, 0xFF	; 255
 494:	83 e0       	ldi	r24, 0x03	; 3
 496:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*SETTING THE RS PIN TO BE A DATA*/
	PinWrite(LCD_INST_PORT,LCD_RS_PIN,HIGH);
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	60 e2       	ldi	r22, 0x20	; 32
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*SETTING THE R/W PIN TO BE WRITE*/
	PinWrite(LCD_INST_PORT,LCD_RW_PIN,LOW);
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	60 e4       	ldi	r22, 0x40	; 64
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*WRITING ON THE DATA PITS*/
	PinWrite(LCD_DATA_PORT,DATABITE,HIGH);
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	6c 2f       	mov	r22, r28
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*SENDING AN ENABLE PULSE*/
	PinWrite(LCD_INST_PORT,LCD_ENABLE_PIN,HIGH);
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	60 e8       	ldi	r22, 0x80	; 128
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
	/*DELAYING FOR 2ms*/
	Timer2_delay_ms(3);
 4c2:	63 e0       	ldi	r22, 0x03	; 3
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Timer2_delay_ms>
	PinWrite(LCD_INST_PORT,LCD_ENABLE_PIN,LOW);
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	60 e8       	ldi	r22, 0x80	; 128
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <PinWrite>
}
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <LCD_INIT>:
{
	
	/*creating a flag error*/
	uint8 Errorflag=LCDok;
	/*delaying for 40 milliseconds*/
	Timer2_delay_ms(40);
 4dc:	68 e2       	ldi	r22, 0x28	; 40
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Timer2_delay_ms>
	/*sending the function set command to have 2 lines,font size*/
	LCD_SEND_COMMAND(LCD_FUNCTION_SET);
 4e8:	88 e3       	ldi	r24, 0x38	; 56
 4ea:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_SEND_COMMAND>
	/*activating the display*/
	LCD_SEND_COMMAND(LCD_DisplayON);
 4ee:	8f e0       	ldi	r24, 0x0F	; 15
 4f0:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_SEND_COMMAND>
	/*clearing the display for the first time*/
	LCD_SEND_COMMAND(LCD_ClearDisplay);
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_SEND_COMMAND>
	/*waiting for 2 milliseconds*/
	Timer2_delay_ms(2);
 4fa:	62 e0       	ldi	r22, 0x02	; 2
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Timer2_delay_ms>
	/*returning function error status*/
	return Errorflag;
}
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	08 95       	ret

0000050a <LCD_OFF>:
LCDstatus LCD_OFF(void)
{
	/*creating a flag error*/
	uint8 Errorflag=LCDok;
	/*sending a display off command*/
	LCD_SEND_COMMAND(LCD_DisplayOFF);
 50a:	8b e0       	ldi	r24, 0x0B	; 11
 50c:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_SEND_COMMAND>
	/*return the status of the function*/
	return Errorflag;	
}
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret

00000514 <LCD_ON>:
LCDstatus LCD_ON(void)
{
	/*creating a flag error*/
	uint8 Errorflag=LCDok;
	/*sending a display off command*/
	LCD_SEND_COMMAND(LCD_DisplayON);
 514:	8f e0       	ldi	r24, 0x0F	; 15
 516:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_SEND_COMMAND>
	/*return the status of the function*/
	return Errorflag;
}
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	08 95       	ret

0000051e <LCD_SEND_STRING>:

/*a function to send a string on the screen*/
LCDstatus LCD_SEND_STRING(uint8* STRING)
{
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	ec 01       	movw	r28, r24
	/*creating a flag error*/
	uint8 Errorflag=LCDSendStringError;
 524:	94 e0       	ldi	r25, 0x04	; 4
	
	while(*(STRING)!='\0')
 526:	04 c0       	rjmp	.+8      	; 0x530 <LCD_SEND_STRING+0x12>
	{
		LCD_SEND_DATA(*(STRING));
 528:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_SEND_DATA>
		STRING++;
 52c:	21 96       	adiw	r28, 0x01	; 1
		Errorflag=LCDok;
 52e:	90 e0       	ldi	r25, 0x00	; 0
LCDstatus LCD_SEND_STRING(uint8* STRING)
{
	/*creating a flag error*/
	uint8 Errorflag=LCDSendStringError;
	
	while(*(STRING)!='\0')
 530:	88 81       	ld	r24, Y
 532:	81 11       	cpse	r24, r1
 534:	f9 cf       	rjmp	.-14     	; 0x528 <LCD_SEND_STRING+0xa>
		LCD_SEND_DATA(*(STRING));
		STRING++;
		Errorflag=LCDok;
	}
	return Errorflag;
}
 536:	89 2f       	mov	r24, r25
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <LCD_Clear>:
LCDstatus LCD_Clear(void)
{
	/*creating a flag error*/
	uint8 Errorflag=LCDok;
	/*sending a clear command*/
	LCD_SEND_COMMAND(LCD_ClearDisplay);
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_SEND_COMMAND>
	/*waiting for two milliseconds*/
	Timer2_delay_ms(2);
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Timer2_delay_ms>
	/*returning the error status*/
	return Errorflag;
}
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	08 95       	ret

00000554 <LCD_SendChar>:

/*a function to send a character on the screen*/
LCDstatus LCD_SendChar(uint8 charact)
{
 554:	cf 93       	push	r28
 556:	c8 2f       	mov	r28, r24
	/*creating an error flag*/
	uint8 Errorflag=LCDok;
	
	/*sending a character to the LCD*/
	LCD_SEND_DATA(charact);
 558:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_SEND_DATA>
	
	/*checking if the character was null or not*/
	if(charact==('\0'))
 55c:	cc 23       	and	r28, r28
 55e:	11 f0       	breq	.+4      	; 0x564 <LCD_SendChar+0x10>

/*a function to send a character on the screen*/
LCDstatus LCD_SendChar(uint8 charact)
{
	/*creating an error flag*/
	uint8 Errorflag=LCDok;
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	01 c0       	rjmp	.+2      	; 0x566 <LCD_SendChar+0x12>
	
	/*checking if the character was null or not*/
	if(charact==('\0'))
	{
		/*updating the flag error*/
		Errorflag=LCDSendCharError;
 564:	87 e0       	ldi	r24, 0x07	; 7
	}
	/*returning the status of the function*/
	return Errorflag;
}
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <LCD_GOTO_XY>:

/*a function to type in a specific place*/
LCDstatus LCD_GOTO_XY(uint8 Row,uint8 Col)
{
 56a:	cf 93       	push	r28
	/*creating an error flag*/
	uint8 Errorflag=LCDGoToXYError;
	/*initializing the ram address for positioning*/
	uint8 DDRAMAdress=0;
	/*checking for which row to write at*/
	if(Row==LCD_ROW0)
 56c:	81 11       	cpse	r24, r1
 56e:	04 c0       	rjmp	.+8      	; 0x578 <LCD_GOTO_XY+0xe>
	{
		/*typing at the desired column at Row 0*/
		DDRAMAdress=Col;
		/*setting the MSB with one*/
		DDRAMAdress|=(1<<7);
 570:	86 2f       	mov	r24, r22
 572:	80 68       	ori	r24, 0x80	; 128
		/*updating the error flag status*/
		Errorflag=LCDok;
 574:	c0 e0       	ldi	r28, 0x00	; 0
 576:	09 c0       	rjmp	.+18     	; 0x58a <LCD_GOTO_XY+0x20>
	}
	/*incase of Row1*/
	else if(Row==LCD_ROW1)
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	29 f4       	brne	.+10     	; 0x586 <LCD_GOTO_XY+0x1c>
	{
		/*adding the desired column with the beginning of the second row to write at it*/
		DDRAMAdress=Col+(0x40);
 57c:	80 e4       	ldi	r24, 0x40	; 64
 57e:	86 0f       	add	r24, r22
		/*setting the MSB with one*/
		DDRAMAdress|=(1<<7);
 580:	80 68       	ori	r24, 0x80	; 128
		/*updating the error flag status*/
		Errorflag=LCDok;
 582:	c0 e0       	ldi	r28, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <LCD_GOTO_XY+0x20>
LCDstatus LCD_GOTO_XY(uint8 Row,uint8 Col)
{
	/*creating an error flag*/
	uint8 Errorflag=LCDGoToXYError;
	/*initializing the ram address for positioning*/
	uint8 DDRAMAdress=0;
 586:	80 e0       	ldi	r24, 0x00	; 0

/*a function to type in a specific place*/
LCDstatus LCD_GOTO_XY(uint8 Row,uint8 Col)
{
	/*creating an error flag*/
	uint8 Errorflag=LCDGoToXYError;
 588:	c6 e0       	ldi	r28, 0x06	; 6
		DDRAMAdress|=(1<<7);
		/*updating the error flag status*/
		Errorflag=LCDok;
	}
	/*sending the command */
	LCD_SEND_COMMAND(DDRAMAdress);
 58a:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_SEND_COMMAND>
	
	return Errorflag;
 58e:	8c 2f       	mov	r24, r28
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <main>:

#include "APPLICATION/APP_INTERFACE.h"
int main(void)
{
	/*initializing the app*/
	 INITIALIZE_ALL();
 594:	0e 94 49 00 	call	0x92	; 0x92 <INITIALIZE_ALL>

    while (1) 
    {
		/*implementing the app*/
		AppWorking();
 598:	0e 94 7d 00 	call	0xfa	; 0xfa <AppWorking>
 59c:	fd cf       	rjmp	.-6      	; 0x598 <main+0x4>

0000059e <PinConfig>:
{
	/*initializing a flag for configuration error*/
	uint8 ErrorFlag=1;
	
	/*switching over ports*/
	switch(port)
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	11 f1       	breq	.+68     	; 0x5e6 <PinConfig+0x48>
 5a2:	30 f0       	brcs	.+12     	; 0x5b0 <PinConfig+0x12>
 5a4:	82 30       	cpi	r24, 0x02	; 2
 5a6:	d1 f1       	breq	.+116    	; 0x61c <PinConfig+0x7e>
 5a8:	83 30       	cpi	r24, 0x03	; 3
 5aa:	09 f4       	brne	.+2      	; 0x5ae <PinConfig+0x10>
 5ac:	52 c0       	rjmp	.+164    	; 0x652 <PinConfig+0xb4>
 5ae:	6c c0       	rjmp	.+216    	; 0x688 <PinConfig+0xea>
	{
		/*incase of port A*/
		case PORTA :
		{
			/*switching over the status of the pin*/
			switch(status)
 5b0:	41 30       	cpi	r20, 0x01	; 1
 5b2:	51 f0       	breq	.+20     	; 0x5c8 <PinConfig+0x2a>
 5b4:	18 f0       	brcs	.+6      	; 0x5bc <PinConfig+0x1e>
 5b6:	42 30       	cpi	r20, 0x02	; 2
 5b8:	89 f0       	breq	.+34     	; 0x5dc <PinConfig+0x3e>
 5ba:	68 c0       	rjmp	.+208    	; 0x68c <PinConfig+0xee>
			{
				case input_float :
				{
					DIO_DDRA&=~pin;					   //clearing the required pins to 0
 5bc:	8a b3       	in	r24, 0x1a	; 26
 5be:	60 95       	com	r22
 5c0:	68 23       	and	r22, r24
 5c2:	6a bb       	out	0x1a, r22	; 26
					ErrorFlag=0;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
					break;
 5c6:	69 c0       	rjmp	.+210    	; 0x69a <PinConfig+0xfc>
				}
				case input_pullup :
				{
					DIO_DDRA&=~pin;					 //clearing the required pins to 0
 5c8:	8a b3       	in	r24, 0x1a	; 26
 5ca:	96 2f       	mov	r25, r22
 5cc:	90 95       	com	r25
 5ce:	89 23       	and	r24, r25
 5d0:	8a bb       	out	0x1a, r24	; 26
					DIO_PORTA|=pin;					//setting the required pins to 1
 5d2:	8b b3       	in	r24, 0x1b	; 27
 5d4:	68 2b       	or	r22, r24
 5d6:	6b bb       	out	0x1b, r22	; 27
					ErrorFlag=0;
 5d8:	80 e0       	ldi	r24, 0x00	; 0
					break;
 5da:	5f c0       	rjmp	.+190    	; 0x69a <PinConfig+0xfc>
				}
				case output :
				{
					DIO_DDRA|=pin;					//setting the required pins to 1
 5dc:	8a b3       	in	r24, 0x1a	; 26
 5de:	68 2b       	or	r22, r24
 5e0:	6a bb       	out	0x1a, r22	; 26
					ErrorFlag=0;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
					break;
 5e4:	5a c0       	rjmp	.+180    	; 0x69a <PinConfig+0xfc>
		}
		/*incase of port B*/
		case PORTB :
		{
			/*switching over the status of the pin*/
			switch(status)
 5e6:	41 30       	cpi	r20, 0x01	; 1
 5e8:	51 f0       	breq	.+20     	; 0x5fe <PinConfig+0x60>
 5ea:	18 f0       	brcs	.+6      	; 0x5f2 <PinConfig+0x54>
 5ec:	42 30       	cpi	r20, 0x02	; 2
 5ee:	89 f0       	breq	.+34     	; 0x612 <PinConfig+0x74>
 5f0:	4f c0       	rjmp	.+158    	; 0x690 <PinConfig+0xf2>
			{
				case input_float :
				{
					DIO_DDRB&=~pin;				  //clearing the required pins to 0
 5f2:	87 b3       	in	r24, 0x17	; 23
 5f4:	60 95       	com	r22
 5f6:	68 23       	and	r22, r24
 5f8:	67 bb       	out	0x17, r22	; 23
					ErrorFlag=0;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
					break;
 5fc:	4e c0       	rjmp	.+156    	; 0x69a <PinConfig+0xfc>
				}
				case input_pullup :
				{
					DIO_DDRB&=~pin;				 //clearing the required pins to 0
 5fe:	87 b3       	in	r24, 0x17	; 23
 600:	96 2f       	mov	r25, r22
 602:	90 95       	com	r25
 604:	89 23       	and	r24, r25
 606:	87 bb       	out	0x17, r24	; 23
					DIO_PORTB|=pin;				//setting the required pins to 1
 608:	88 b3       	in	r24, 0x18	; 24
 60a:	68 2b       	or	r22, r24
 60c:	68 bb       	out	0x18, r22	; 24
					ErrorFlag=0;
 60e:	80 e0       	ldi	r24, 0x00	; 0
					break;
 610:	44 c0       	rjmp	.+136    	; 0x69a <PinConfig+0xfc>
				}
				case output :
				{
					DIO_DDRB|=pin;				//setting the required pins to 1
 612:	87 b3       	in	r24, 0x17	; 23
 614:	68 2b       	or	r22, r24
 616:	67 bb       	out	0x17, r22	; 23
					ErrorFlag=0;
 618:	80 e0       	ldi	r24, 0x00	; 0
					break;
 61a:	3f c0       	rjmp	.+126    	; 0x69a <PinConfig+0xfc>
		}
		/*incase of port C*/
		case PORTC :
		{
			/*switching over the status of the pin*/
			switch(status)
 61c:	41 30       	cpi	r20, 0x01	; 1
 61e:	51 f0       	breq	.+20     	; 0x634 <PinConfig+0x96>
 620:	18 f0       	brcs	.+6      	; 0x628 <PinConfig+0x8a>
 622:	42 30       	cpi	r20, 0x02	; 2
 624:	89 f0       	breq	.+34     	; 0x648 <PinConfig+0xaa>
 626:	36 c0       	rjmp	.+108    	; 0x694 <PinConfig+0xf6>
			{
				case input_float :
				{
					DIO_DDRC&=~pin;					//clearing the required pins to 0
 628:	84 b3       	in	r24, 0x14	; 20
 62a:	60 95       	com	r22
 62c:	68 23       	and	r22, r24
 62e:	64 bb       	out	0x14, r22	; 20
					ErrorFlag=0;
 630:	80 e0       	ldi	r24, 0x00	; 0
					break;
 632:	33 c0       	rjmp	.+102    	; 0x69a <PinConfig+0xfc>
				}
				case input_pullup :
				{
					DIO_DDRC&=~pin;					 //clearing the required pins to 0
 634:	84 b3       	in	r24, 0x14	; 20
 636:	96 2f       	mov	r25, r22
 638:	90 95       	com	r25
 63a:	89 23       	and	r24, r25
 63c:	84 bb       	out	0x14, r24	; 20
					DIO_PORTC|=pin;					//setting the required pins to 1
 63e:	85 b3       	in	r24, 0x15	; 21
 640:	68 2b       	or	r22, r24
 642:	65 bb       	out	0x15, r22	; 21
					ErrorFlag=0;
 644:	80 e0       	ldi	r24, 0x00	; 0
					break;
 646:	29 c0       	rjmp	.+82     	; 0x69a <PinConfig+0xfc>
				}
				case output :
				{
					DIO_DDRC|=pin;					//setting the required pins to 1
 648:	84 b3       	in	r24, 0x14	; 20
 64a:	68 2b       	or	r22, r24
 64c:	64 bb       	out	0x14, r22	; 20
					ErrorFlag=0;
 64e:	80 e0       	ldi	r24, 0x00	; 0
					break;
 650:	24 c0       	rjmp	.+72     	; 0x69a <PinConfig+0xfc>
		}
		/*incase of port D*/
		case PORTD :
		{
			/*switching over the status of the pin*/
			switch(status)
 652:	41 30       	cpi	r20, 0x01	; 1
 654:	51 f0       	breq	.+20     	; 0x66a <PinConfig+0xcc>
 656:	18 f0       	brcs	.+6      	; 0x65e <PinConfig+0xc0>
 658:	42 30       	cpi	r20, 0x02	; 2
 65a:	89 f0       	breq	.+34     	; 0x67e <PinConfig+0xe0>
 65c:	1d c0       	rjmp	.+58     	; 0x698 <PinConfig+0xfa>
			{
				case input_float :
				{
					DIO_DDRD&=~pin;				//clearing the required pins to 0
 65e:	81 b3       	in	r24, 0x11	; 17
 660:	60 95       	com	r22
 662:	68 23       	and	r22, r24
 664:	61 bb       	out	0x11, r22	; 17
					ErrorFlag=0;
 666:	80 e0       	ldi	r24, 0x00	; 0
					break;
 668:	18 c0       	rjmp	.+48     	; 0x69a <PinConfig+0xfc>
				}
				case input_pullup :
				{
					DIO_DDRD&=~pin;				//clearing the required pins to 0
 66a:	81 b3       	in	r24, 0x11	; 17
 66c:	96 2f       	mov	r25, r22
 66e:	90 95       	com	r25
 670:	89 23       	and	r24, r25
 672:	81 bb       	out	0x11, r24	; 17
					DIO_PORTD|=pin;				//setting the required pins to 1
 674:	82 b3       	in	r24, 0x12	; 18
 676:	68 2b       	or	r22, r24
 678:	62 bb       	out	0x12, r22	; 18
					ErrorFlag=0;
 67a:	80 e0       	ldi	r24, 0x00	; 0
					break;
 67c:	0e c0       	rjmp	.+28     	; 0x69a <PinConfig+0xfc>
				}
				case output :
				{
					DIO_DDRD|=pin;				//setting the required pins to 1
 67e:	81 b3       	in	r24, 0x11	; 17
 680:	68 2b       	or	r22, r24
 682:	61 bb       	out	0x11, r22	; 17
					ErrorFlag=0;
 684:	80 e0       	ldi	r24, 0x00	; 0
					break;
 686:	09 c0       	rjmp	.+18     	; 0x69a <PinConfig+0xfc>

/*a function to configure the direction and the port of the pin */
DIO_ErrorStatus PinConfig(uint8 port,uint8 pin,uint8 status)
{
	/*initializing a flag for configuration error*/
	uint8 ErrorFlag=1;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	07 c0       	rjmp	.+14     	; 0x69a <PinConfig+0xfc>
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	05 c0       	rjmp	.+10     	; 0x69a <PinConfig+0xfc>
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	03 c0       	rjmp	.+6      	; 0x69a <PinConfig+0xfc>
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	01 c0       	rjmp	.+2      	; 0x69a <PinConfig+0xfc>
 698:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}	
	}
	
	/*flag error checking*/
	if (ErrorFlag==1)
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	11 f4       	brne	.+4      	; 0x6a2 <PinConfig+0x104>
	{
		return config_error;
 69e:	83 e0       	ldi	r24, 0x03	; 3
 6a0:	08 95       	ret
	}
	/*returning the function status*/
	return ok;
 6a2:	80 e0       	ldi	r24, 0x00	; 0
}
 6a4:	08 95       	ret

000006a6 <PinWrite>:
DIO_ErrorStatus PinWrite(uint8 port,uint8 pin,uint8 value)
{
	/*initializing a flag for configuration error*/
	uint8 ErrorFlag=1;
	/*switching over ports*/
	switch(port)
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	a9 f0       	breq	.+42     	; 0x6d4 <PinWrite+0x2e>
 6aa:	28 f0       	brcs	.+10     	; 0x6b6 <PinWrite+0x10>
 6ac:	82 30       	cpi	r24, 0x02	; 2
 6ae:	09 f1       	breq	.+66     	; 0x6f2 <PinWrite+0x4c>
 6b0:	83 30       	cpi	r24, 0x03	; 3
 6b2:	71 f1       	breq	.+92     	; 0x710 <PinWrite+0x6a>
 6b4:	3c c0       	rjmp	.+120    	; 0x72e <PinWrite+0x88>
	{
		/*incase of port A*/
		case PORTA :
		{
			/*incase of high value setting the pins to one*/
			if (value==HIGH)
 6b6:	41 30       	cpi	r20, 0x01	; 1
 6b8:	29 f4       	brne	.+10     	; 0x6c4 <PinWrite+0x1e>
			{
				DIO_PORTA|=pin;
 6ba:	8b b3       	in	r24, 0x1b	; 27
 6bc:	68 2b       	or	r22, r24
 6be:	6b bb       	out	0x1b, r22	; 27
				ErrorFlag=0;
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	3e c0       	rjmp	.+124    	; 0x740 <PinWrite+0x9a>
			}
			/*incase of low value setting the pins to zero*/
			else if (value==LOW)
 6c4:	41 11       	cpse	r20, r1
 6c6:	35 c0       	rjmp	.+106    	; 0x732 <PinWrite+0x8c>
			{
				DIO_PORTA&=~pin;
 6c8:	8b b3       	in	r24, 0x1b	; 27
 6ca:	60 95       	com	r22
 6cc:	68 23       	and	r22, r24
 6ce:	6b bb       	out	0x1b, r22	; 27
				ErrorFlag=0;
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	36 c0       	rjmp	.+108    	; 0x740 <PinWrite+0x9a>
		}
		/*incase of port B*/
		case PORTB :
		{
			/*incase of high value setting the pins to one*/
			if (value==HIGH)
 6d4:	41 30       	cpi	r20, 0x01	; 1
 6d6:	29 f4       	brne	.+10     	; 0x6e2 <PinWrite+0x3c>
			{
				DIO_PORTB|=pin;
 6d8:	88 b3       	in	r24, 0x18	; 24
 6da:	68 2b       	or	r22, r24
 6dc:	68 bb       	out	0x18, r22	; 24
				ErrorFlag=0;
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	2f c0       	rjmp	.+94     	; 0x740 <PinWrite+0x9a>
			}
			/*incase of low value setting the pins to zero*/
			else if (value==LOW)
 6e2:	41 11       	cpse	r20, r1
 6e4:	28 c0       	rjmp	.+80     	; 0x736 <PinWrite+0x90>
			{
				DIO_PORTB&=~pin;
 6e6:	88 b3       	in	r24, 0x18	; 24
 6e8:	60 95       	com	r22
 6ea:	68 23       	and	r22, r24
 6ec:	68 bb       	out	0x18, r22	; 24
				ErrorFlag=0;
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	27 c0       	rjmp	.+78     	; 0x740 <PinWrite+0x9a>
		}
		/*incase of port C*/
		case PORTC :
		{
			/*incase of high value setting the pins to one*/
			if (value==HIGH)
 6f2:	41 30       	cpi	r20, 0x01	; 1
 6f4:	29 f4       	brne	.+10     	; 0x700 <PinWrite+0x5a>
			{
				DIO_PORTC|=pin;
 6f6:	85 b3       	in	r24, 0x15	; 21
 6f8:	68 2b       	or	r22, r24
 6fa:	65 bb       	out	0x15, r22	; 21
				ErrorFlag=0;
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	20 c0       	rjmp	.+64     	; 0x740 <PinWrite+0x9a>
			}
			/*incase of low value setting the pins to zero*/
			else if (value==LOW)
 700:	41 11       	cpse	r20, r1
 702:	1b c0       	rjmp	.+54     	; 0x73a <PinWrite+0x94>
			{
				DIO_PORTC&=~pin;
 704:	85 b3       	in	r24, 0x15	; 21
 706:	60 95       	com	r22
 708:	68 23       	and	r22, r24
 70a:	65 bb       	out	0x15, r22	; 21
				ErrorFlag=0;
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	18 c0       	rjmp	.+48     	; 0x740 <PinWrite+0x9a>
		}
		/*incase of port D*/
		case PORTD :
		{
			/*incase of high value setting the pins to one*/
			if (value==HIGH)
 710:	41 30       	cpi	r20, 0x01	; 1
 712:	29 f4       	brne	.+10     	; 0x71e <PinWrite+0x78>
			{
				DIO_PORTD|=pin;
 714:	82 b3       	in	r24, 0x12	; 18
 716:	68 2b       	or	r22, r24
 718:	62 bb       	out	0x12, r22	; 18
				ErrorFlag=0;
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	11 c0       	rjmp	.+34     	; 0x740 <PinWrite+0x9a>
			}
			/*incase of low value setting the pins to zero*/
			else if (value==LOW)
 71e:	41 11       	cpse	r20, r1
 720:	0e c0       	rjmp	.+28     	; 0x73e <PinWrite+0x98>
			{
				DIO_PORTD&=~pin;
 722:	82 b3       	in	r24, 0x12	; 18
 724:	60 95       	com	r22
 726:	68 23       	and	r22, r24
 728:	62 bb       	out	0x12, r22	; 18
				ErrorFlag=0;
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	09 c0       	rjmp	.+18     	; 0x740 <PinWrite+0x9a>

/*a function to write a value on a pin,High or Low*/
DIO_ErrorStatus PinWrite(uint8 port,uint8 pin,uint8 value)
{
	/*initializing a flag for configuration error*/
	uint8 ErrorFlag=1;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	07 c0       	rjmp	.+14     	; 0x740 <PinWrite+0x9a>
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	05 c0       	rjmp	.+10     	; 0x740 <PinWrite+0x9a>
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	03 c0       	rjmp	.+6      	; 0x740 <PinWrite+0x9a>
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	01 c0       	rjmp	.+2      	; 0x740 <PinWrite+0x9a>
 73e:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
		}
	}
		/*flag error checking*/
	if (ErrorFlag==1)
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	11 f4       	brne	.+4      	; 0x748 <PinWrite+0xa2>
	{
		return write_error;
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	08 95       	ret
	}
	/*returning the function status*/
	return ok;
 748:	80 e0       	ldi	r24, 0x00	; 0
}
 74a:	08 95       	ret

0000074c <PinRead>:
{
	/*initializing a flag for configuration error*/
	uint8 ErrorFlag=1;
	
	/*switching ports*/
	switch(port)
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	91 f0       	breq	.+36     	; 0x774 <PinRead+0x28>
 750:	28 f0       	brcs	.+10     	; 0x75c <PinRead+0x10>
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	d9 f0       	breq	.+54     	; 0x78c <PinRead+0x40>
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	31 f1       	breq	.+76     	; 0x7a6 <PinRead+0x5a>
 75a:	31 c0       	rjmp	.+98     	; 0x7be <PinRead+0x72>
	{
		/*incase port A*/
		case PORTA :
		{
			/*incase the pin is 1 the returned value is high and if the pin is 0 it will return low*/
			if (DIO_PINA&pin)
 75c:	89 b3       	in	r24, 0x19	; 25
 75e:	68 23       	and	r22, r24
 760:	29 f0       	breq	.+10     	; 0x76c <PinRead+0x20>
			{
				* returned =HIGH;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	fa 01       	movw	r30, r20
 766:	80 83       	st	Z, r24
				ErrorFlag=0;
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	2a c0       	rjmp	.+84     	; 0x7c0 <PinRead+0x74>
			}
			else 
			{
				*returned =LOW;
 76c:	fa 01       	movw	r30, r20
 76e:	10 82       	st	Z, r1
				ErrorFlag=0;
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	26 c0       	rjmp	.+76     	; 0x7c0 <PinRead+0x74>
		}
		/*incase port B*/
		case PORTB :
		{
			/*incase the pin is 1 the returned value is high and if the pin is 0 it will return low*/
			if (DIO_PINB&pin)
 774:	86 b3       	in	r24, 0x16	; 22
 776:	68 23       	and	r22, r24
 778:	29 f0       	breq	.+10     	; 0x784 <PinRead+0x38>
			{
				* returned =HIGH;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	fa 01       	movw	r30, r20
 77e:	80 83       	st	Z, r24
				ErrorFlag=0;
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	1e c0       	rjmp	.+60     	; 0x7c0 <PinRead+0x74>
			}
			else 
			{
				*returned =LOW;
 784:	fa 01       	movw	r30, r20
 786:	10 82       	st	Z, r1
				ErrorFlag=0;
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	1a c0       	rjmp	.+52     	; 0x7c0 <PinRead+0x74>
		}
		/*incase port C*/
		case PORTC :
		{
			/*incase the pin is 1 the returned value is high and if the pin is 0 it will return low*/
			if ((DIO_PINC&pin) ==1)
 78c:	83 b3       	in	r24, 0x13	; 19
 78e:	68 23       	and	r22, r24
 790:	61 30       	cpi	r22, 0x01	; 1
 792:	29 f4       	brne	.+10     	; 0x79e <PinRead+0x52>
			{
				*returned =HIGH;
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	fa 01       	movw	r30, r20
 798:	80 83       	st	Z, r24
				ErrorFlag=0;
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	11 c0       	rjmp	.+34     	; 0x7c0 <PinRead+0x74>

			}
			else 
			{
				*returned =LOW;
 79e:	fa 01       	movw	r30, r20
 7a0:	10 82       	st	Z, r1
				ErrorFlag=0;
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <PinRead+0x74>
		}
		/*incase port d*/
		case PORTD :
		{
			/*incase the pin is 1 the returned value is high and if the pin is 0 it will return low*/
			if (DIO_PIND&pin)
 7a6:	80 b3       	in	r24, 0x10	; 16
 7a8:	68 23       	and	r22, r24
 7aa:	29 f0       	breq	.+10     	; 0x7b6 <PinRead+0x6a>
			{
				*returned =HIGH;
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	fa 01       	movw	r30, r20
 7b0:	80 83       	st	Z, r24
				ErrorFlag=0;
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <PinRead+0x74>
			}
			else 
			{
				*returned =LOW;
 7b6:	fa 01       	movw	r30, r20
 7b8:	10 82       	st	Z, r1
				ErrorFlag=0;
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <PinRead+0x74>

/*a function to read the value that's on the pin*/
DIO_ErrorStatus PinRead(uint8 port,uint8 pin, uint8* returned)
{
	/*initializing a flag for configuration error*/
	uint8 ErrorFlag=1;
 7be:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
		}
	}
		/*flag error checking*/
	if (ErrorFlag==1)
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <PinRead+0x7a>
	{
		return read_error;
	}
	/*returning the function status*/
	return ok;
 7c4:	80 e0       	ldi	r24, 0x00	; 0
}
 7c6:	08 95       	ret

000007c8 <EEPROM_Write>:
	/*creating an interrupt flag*/
	uint8 interrupt_flag=0;


	/*checking if the interrupt flag was initially active or not*/
	if(ReadBit(EEPROM_SREG,SREG_I)==1)
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	07 fe       	sbrs	r0, 7
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <EEPROM_Write+0x10>
	{
		ClearBit(EEPROM_SREG,SREG_I);
 7ce:	9f b7       	in	r25, 0x3f	; 63
 7d0:	9f 77       	andi	r25, 0x7F	; 127
 7d2:	9f bf       	out	0x3f, r25	; 63
		/*raising the flag that the interrupt was active*/
		interrupt_flag=1;		
 7d4:	21 e0       	ldi	r18, 0x01	; 1
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <EEPROM_Write+0x12>
EepromStatus EEPROM_Write(uint8 addresse,uint8 data)
{
	/*create an error flag */
	uint8 errorflag=EEPROMok;
	/*creating an interrupt flag*/
	uint8 interrupt_flag=0;
 7d8:	20 e0       	ldi	r18, 0x00	; 0
	{
		ClearBit(EEPROM_SREG,SREG_I);
		/*raising the flag that the interrupt was active*/
		interrupt_flag=1;		
	}
		ClearBit(EEPROM_SREG,SREG_I);
 7da:	9f b7       	in	r25, 0x3f	; 63
 7dc:	9f 77       	andi	r25, 0x7F	; 127
 7de:	9f bf       	out	0x3f, r25	; 63
	/*waiting until the previouse operation is finished if there're any*/
	while(ReadBit(EEPROM_EECR,EECR_EEWE)==1);
 7e0:	e1 99       	sbic	0x1c, 1	; 28
 7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <EEPROM_Write+0x18>
	/*putting the desired adresse of the memory*/
	EEPROM_EEARL=(addresse);
 7e4:	8e bb       	out	0x1e, r24	; 30
	/*passing the desired byte to be written inside the eedr*/
	EEPROM_EEDR=(data);
 7e6:	6d bb       	out	0x1d, r22	; 29
	/*setting the write bit to enable eeprom writting*/
	SetBit(EEPROM_EECR,EECR_EEMWE);
 7e8:	8c b3       	in	r24, 0x1c	; 28
 7ea:	84 60       	ori	r24, 0x04	; 4
 7ec:	8c bb       	out	0x1c, r24	; 28
	/*setting the eeprom operating bit to start writting*/
	SetBit(EEPROM_EECR,EECR_EEWE);
 7ee:	8c b3       	in	r24, 0x1c	; 28
 7f0:	82 60       	ori	r24, 0x02	; 2
 7f2:	8c bb       	out	0x1c, r24	; 28

	/*checking if the write bit is on or off*/
	if (ReadBit(EEPROM_EECR,EECR_EEWE)==0)
 7f4:	e1 9b       	sbis	0x1c, 1	; 28
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <EEPROM_Write+0x34>

/*a function to write on the internal eeprom memory*/
EepromStatus EEPROM_Write(uint8 addresse,uint8 data)
{
	/*create an error flag */
	uint8 errorflag=EEPROMok;
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	01 c0       	rjmp	.+2      	; 0x7fe <EEPROM_Write+0x36>
	SetBit(EEPROM_EECR,EECR_EEWE);

	/*checking if the write bit is on or off*/
	if (ReadBit(EEPROM_EECR,EECR_EEWE)==0)
	{
		errorflag=EEPROM_WRITE_Error;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
	}
	/*checking the interrupt flag*/
	if(interrupt_flag==1)
 7fe:	21 30       	cpi	r18, 0x01	; 1
 800:	19 f4       	brne	.+6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	{
		SetBit(EEPROM_SREG,SREG_I);	
 802:	9f b7       	in	r25, 0x3f	; 63
 804:	90 68       	ori	r25, 0x80	; 128
 806:	9f bf       	out	0x3f, r25	; 63
	}
	/*returning the function status*/
	return errorflag;
}
 808:	08 95       	ret

0000080a <EEPROM_READ>:
	/*create an error flag */
	uint8 errorflag=EEPROMok;
	/*creating an interrupt flag*/
	uint8 interrupt_flag=0;
	/*checking if the interrupt flag was initially active or not*/
	if(ReadBit(EEPROM_SREG,SREG_I))
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	07 fe       	sbrs	r0, 7
 80e:	05 c0       	rjmp	.+10     	; 0x81a <EEPROM_READ+0x10>
	{
		ClearBit(EEPROM_SREG,SREG_I);
 810:	9f b7       	in	r25, 0x3f	; 63
 812:	9f 77       	andi	r25, 0x7F	; 127
 814:	9f bf       	out	0x3f, r25	; 63
		/*raising the flag that the interrupt was active*/
		interrupt_flag=1;
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	01 c0       	rjmp	.+2      	; 0x81c <EEPROM_READ+0x12>
EepromStatus EEPROM_READ(uint8 addresse,uint8* read)
{
	/*create an error flag */
	uint8 errorflag=EEPROMok;
	/*creating an interrupt flag*/
	uint8 interrupt_flag=0;
 81a:	90 e0       	ldi	r25, 0x00	; 0
		ClearBit(EEPROM_SREG,SREG_I);
		/*raising the flag that the interrupt was active*/
		interrupt_flag=1;
	}
	/*waiting until the previouse operation is finished if there're any*/
	while(ReadBit(EEPROM_EECR,EECR_EEWE));
 81c:	e1 99       	sbic	0x1c, 1	; 28
 81e:	fe cf       	rjmp	.-4      	; 0x81c <EEPROM_READ+0x12>
	/*putting the desired adresse of the memory*/
	EEPROM_EEARL=(addresse);
 820:	8e bb       	out	0x1e, r24	; 30
	/*setting the write bit to enable eeprom reading*/
	SetBit(EEPROM_EECR,EECR_EERE);
 822:	8c b3       	in	r24, 0x1c	; 28
 824:	81 60       	ori	r24, 0x01	; 1
 826:	8c bb       	out	0x1c, r24	; 28
	/*delaying to make sure that the read function is done*/
	/*checking if the read bit is on or off*/
	if (ReadBit(EEPROM_EECR,EECR_EERE)==0)
 828:	e0 9b       	sbis	0x1c, 0	; 28
 82a:	02 c0       	rjmp	.+4      	; 0x830 <EEPROM_READ+0x26>
}

EepromStatus EEPROM_READ(uint8 addresse,uint8* read)
{
	/*create an error flag */
	uint8 errorflag=EEPROMok;
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	01 c0       	rjmp	.+2      	; 0x832 <EEPROM_READ+0x28>
	SetBit(EEPROM_EECR,EECR_EERE);
	/*delaying to make sure that the read function is done*/
	/*checking if the read bit is on or off*/
	if (ReadBit(EEPROM_EECR,EECR_EERE)==0)
	{
		errorflag=EEPROM_WRITE_Error;
 830:	81 e0       	ldi	r24, 0x01	; 1
	}
	/*checking the interrupt flag*/
	if(interrupt_flag==1)
 832:	91 30       	cpi	r25, 0x01	; 1
 834:	19 f4       	brne	.+6      	; 0x83c <EEPROM_READ+0x32>
	{
		SetBit(EEPROM_SREG,SREG_I);
 836:	9f b7       	in	r25, 0x3f	; 63
 838:	90 68       	ori	r25, 0x80	; 128
 83a:	9f bf       	out	0x3f, r25	; 63
	}
	/*reading the desired byte from the EEDR REGISTER*/
	*(read)=EEPROM_EEDR;
 83c:	9d b3       	in	r25, 0x1d	; 29
 83e:	fb 01       	movw	r30, r22
 840:	90 83       	st	Z, r25
	/*returning the function status*/
	return errorflag;
}
 842:	08 95       	ret

00000844 <PwmInit>:




PwmStatus PwmInit(uint8 PwmType,uint8 Prescaler)
{
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	c6 2f       	mov	r28, r22
	/*creating a flag error*/
	uint8 Errorflag=pwm_initerror;
	if(PwmType==fastPwm)
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	41 f4       	brne	.+16     	; 0x85e <PwmInit+0x1a>
	{
		/*activating the fast pwm */
		SetBit(TIM_TCCR0,TCCR0_WGM00);
 84e:	93 b7       	in	r25, 0x33	; 51
 850:	90 64       	ori	r25, 0x40	; 64
 852:	93 bf       	out	0x33, r25	; 51
		SetBit(TIM_TCCR0,TCCR0_WGM01);	
 854:	93 b7       	in	r25, 0x33	; 51
 856:	98 60       	ori	r25, 0x08	; 8
 858:	93 bf       	out	0x33, r25	; 51
		/*assigning the Errorflag*/
		Errorflag=pwmok;
 85a:	d0 e0       	ldi	r29, 0x00	; 0
 85c:	01 c0       	rjmp	.+2      	; 0x860 <__stack+0x1>


PwmStatus PwmInit(uint8 PwmType,uint8 Prescaler)
{
	/*creating a flag error*/
	uint8 Errorflag=pwm_initerror;
 85e:	d1 e0       	ldi	r29, 0x01	; 1
		SetBit(TIM_TCCR0,TCCR0_WGM00);
		SetBit(TIM_TCCR0,TCCR0_WGM01);	
		/*assigning the Errorflag*/
		Errorflag=pwmok;
	}
	if(PwmType==phasePwm)
 860:	82 30       	cpi	r24, 0x02	; 2
 862:	39 f4       	brne	.+14     	; 0x872 <__stack+0x13>
	{
		/*activating the correct phase pwm */
		SetBit(TIM_TCCR0,TCCR0_WGM00);
 864:	83 b7       	in	r24, 0x33	; 51
 866:	80 64       	ori	r24, 0x40	; 64
 868:	83 bf       	out	0x33, r24	; 51
		ClearBit(TIM_TCCR0,TCCR0_WGM01);
 86a:	83 b7       	in	r24, 0x33	; 51
 86c:	87 7f       	andi	r24, 0xF7	; 247
 86e:	83 bf       	out	0x33, r24	; 51
		/*assigning the flag*/
		Errorflag=pwmok;
 870:	d0 e0       	ldi	r29, 0x00	; 0
	}
	/*configuring the oc0 to be output*/
	PinConfig(PORTB,pin3,output);
 872:	42 e0       	ldi	r20, 0x02	; 2
 874:	68 e0       	ldi	r22, 0x08	; 8
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	0e 94 cf 02 	call	0x59e	; 0x59e <PinConfig>
	/*making it always non inverting mode*/
	ClearBit(TIM_TCCR0,TCCR0_COM00);
 87c:	83 b7       	in	r24, 0x33	; 51
 87e:	8f 7e       	andi	r24, 0xEF	; 239
 880:	83 bf       	out	0x33, r24	; 51
	SetBit(TIM_TCCR0,TCCR0_COM01);
 882:	83 b7       	in	r24, 0x33	; 51
 884:	80 62       	ori	r24, 0x20	; 32
 886:	83 bf       	out	0x33, r24	; 51
	
	/*assigning the prescaler*/
	TIM_TCCR0|=Prescaler;
 888:	83 b7       	in	r24, 0x33	; 51
 88a:	c8 2b       	or	r28, r24
 88c:	c3 bf       	out	0x33, r28	; 51

	return Errorflag;
}
 88e:	8d 2f       	mov	r24, r29
 890:	df 91       	pop	r29
 892:	cf 91       	pop	r28
 894:	08 95       	ret

00000896 <PwmDuty>:
PwmStatus PwmDuty(uint8 DutyCycle)
{
	/*creating a flag error*/
	uint8 Errorflag=pwmok;
	/*loading the ocr0 with the duty cycle value*/
	TIM_OCR0=DutyCycle;
 896:	8c bf       	out	0x3c, r24	; 60
	/*checking if there is any error occured*/
	if(TIM_OCR0==0)
 898:	8c b7       	in	r24, 0x3c	; 60
	{
		Errorflag==pwmdutyerror;
	}
	return Errorflag;
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	08 95       	ret

0000089e <Timer2DelayCounter>:
	{
		Errorflag=TIM_OffError;
	}
	/*returning the function status*/
	return Errorflag;
}
 89e:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <DelayCounter>
 8a2:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <DelayCounter+0x1>
 8a6:	a0 91 c0 00 	lds	r26, 0x00C0	; 0x8000c0 <DelayCounter+0x2>
 8aa:	b0 91 c1 00 	lds	r27, 0x00C1	; 0x8000c1 <DelayCounter+0x3>
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	a1 1d       	adc	r26, r1
 8b2:	b1 1d       	adc	r27, r1
 8b4:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <DelayCounter>
 8b8:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <DelayCounter+0x1>
 8bc:	a0 93 c0 00 	sts	0x00C0, r26	; 0x8000c0 <DelayCounter+0x2>
 8c0:	b0 93 c1 00 	sts	0x00C1, r27	; 0x8000c1 <DelayCounter+0x3>
 8c4:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <DelayCounter>
 8c8:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <DelayCounter+0x1>
 8cc:	a0 91 c0 00 	lds	r26, 0x00C0	; 0x8000c0 <DelayCounter+0x2>
 8d0:	b0 91 c1 00 	lds	r27, 0x00C1	; 0x8000c1 <DelayCounter+0x3>
 8d4:	89 2b       	or	r24, r25
 8d6:	8a 2b       	or	r24, r26
 8d8:	8b 2b       	or	r24, r27
 8da:	11 f0       	breq	.+4      	; 0x8e0 <Timer2DelayCounter+0x42>
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	08 95       	ret
 8e0:	85 e0       	ldi	r24, 0x05	; 5
 8e2:	08 95       	ret

000008e4 <Timer2_Reset>:
 8e4:	80 b7       	in	r24, 0x30	; 48
 8e6:	82 60       	ori	r24, 0x02	; 2
 8e8:	80 bf       	out	0x30, r24	; 48
 8ea:	00 b6       	in	r0, 0x30	; 48
 8ec:	01 fc       	sbrc	r0, 1
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <Timer2_Reset+0x10>
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	08 95       	ret
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	08 95       	ret

000008f8 <Timer2_delay_ms>:
									/*							DELAY FUNCTIONS                             */
									/************************************************************************/

/*a function to make a delay in milliseconds*/
TimerErrorStatus Timer2_delay_ms(uint32 DelayVariable)
{
 8f8:	cf 92       	push	r12
 8fa:	df 92       	push	r13
 8fc:	ef 92       	push	r14
 8fe:	ff 92       	push	r15
 900:	cf 93       	push	r28
 902:	6b 01       	movw	r12, r22
 904:	7c 01       	movw	r14, r24
	/*create error flag*/
	uint8 Errorflag=TIM_ok;
	/*checking for the timer error status*/
	if(GbTo_CTCtim==NULLPTR)
 906:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <GbTo_CTCtim>
 90a:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <GbTo_CTCtim+0x1>
 90e:	89 2b       	or	r24, r25
 910:	11 f0       	breq	.+4      	; 0x916 <Timer2_delay_ms+0x1e>

/*a function to make a delay in milliseconds*/
TimerErrorStatus Timer2_delay_ms(uint32 DelayVariable)
{
	/*create error flag*/
	uint8 Errorflag=TIM_ok;
 912:	c0 e0       	ldi	r28, 0x00	; 0
 914:	01 c0       	rjmp	.+2      	; 0x918 <Timer2_delay_ms+0x20>
	/*checking for the timer error status*/
	if(GbTo_CTCtim==NULLPTR)
	{
		Errorflag=TIM_DelayError;
 916:	c5 e0       	ldi	r28, 0x05	; 5
	}
	/*reseting the delay counter for the delay operation*/
	DelayCounter=0;
 918:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <DelayCounter>
 91c:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <DelayCounter+0x1>
 920:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <DelayCounter+0x2>
 924:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <DelayCounter+0x3>
	Timer2_Reset();
 928:	0e 94 72 04 	call	0x8e4	; 0x8e4 <Timer2_Reset>
	/*creating the delay by the polling on while loop*/
	while(DelayVariable>=DelayCounter);
 92c:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <DelayCounter>
 930:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <DelayCounter+0x1>
 934:	a0 91 c0 00 	lds	r26, 0x00C0	; 0x8000c0 <DelayCounter+0x2>
 938:	b0 91 c1 00 	lds	r27, 0x00C1	; 0x8000c1 <DelayCounter+0x3>
 93c:	c8 16       	cp	r12, r24
 93e:	d9 06       	cpc	r13, r25
 940:	ea 06       	cpc	r14, r26
 942:	fb 06       	cpc	r15, r27
 944:	98 f7       	brcc	.-26     	; 0x92c <Timer2_delay_ms+0x34>
	
	/*returning the function status*/	
	return Errorflag;
}
 946:	8c 2f       	mov	r24, r28
 948:	cf 91       	pop	r28
 94a:	ff 90       	pop	r15
 94c:	ef 90       	pop	r14
 94e:	df 90       	pop	r13
 950:	cf 90       	pop	r12
 952:	08 95       	ret

00000954 <Timer2_1ms_Init>:
TimerErrorStatus Timer2_1ms_Init(void)
{
	/*creating error flag*/
	uint8 Errorflag=TIM_ok;
	/*activating the global interrupt flag*/
	SetBit(TIM_SREG2,SREG_I);
 954:	8f b7       	in	r24, 0x3f	; 63
 956:	80 68       	ori	r24, 0x80	; 128
 958:	8f bf       	out	0x3f, r24	; 63
	
	/*adjusting the timer mode to CTC mode*/
	ClearBit(TIM_TCCR2,TCCR2_WGM20);
 95a:	85 b5       	in	r24, 0x25	; 37
 95c:	8f 7b       	andi	r24, 0xBF	; 191
 95e:	85 bd       	out	0x25, r24	; 37
	SetBit(TIM_TCCR2,TCCR2_WGM21);
 960:	85 b5       	in	r24, 0x25	; 37
 962:	88 60       	ori	r24, 0x08	; 8
 964:	85 bd       	out	0x25, r24	; 37
	

	/*disabling the oc0 pin*/
	ClearBit(TIM_TCCR2,TCCR2_COM20);
 966:	85 b5       	in	r24, 0x25	; 37
 968:	8f 7e       	andi	r24, 0xEF	; 239
 96a:	85 bd       	out	0x25, r24	; 37
	ClearBit(TIM_TCCR2,TCCR2_COM21);
 96c:	85 b5       	in	r24, 0x25	; 37
 96e:	8f 7d       	andi	r24, 0xDF	; 223
 970:	85 bd       	out	0x25, r24	; 37
	
	/*activating the interrupt for timer overflow event*/
	SetBit(TIM_TIMSK2,TIMSK2_OCIE2);
 972:	89 b7       	in	r24, 0x39	; 57
 974:	80 68       	ori	r24, 0x80	; 128
 976:	89 bf       	out	0x39, r24	; 57
	
	/*putting the value to be compared with*/
	TIM_OCR2=250;
 978:	8a ef       	ldi	r24, 0xFA	; 250
 97a:	83 bd       	out	0x23, r24	; 35
	
	/*setting the prescaler for the counter*/
	TIM_TCCR2|=_64_PRESCALER;
 97c:	85 b5       	in	r24, 0x25	; 37
 97e:	83 60       	ori	r24, 0x03	; 3
 980:	85 bd       	out	0x25, r24	; 37

	/*passing the function to the global pointer*/
	GbTo_CTCtim=Timer2DelayCounter;
 982:	8f e4       	ldi	r24, 0x4F	; 79
 984:	94 e0       	ldi	r25, 0x04	; 4
 986:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <GbTo_CTCtim+0x1>
 98a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <GbTo_CTCtim>
	
	/*reseting the prescaler to begin counting*/
	SetBit(TIM_SFIOR,SFIOR_PSR2);
 98e:	80 b7       	in	r24, 0x30	; 48
 990:	82 60       	ori	r24, 0x02	; 2
 992:	80 bf       	out	0x30, r24	; 48
	
	/*checking for the error flag*/
	if(TIM_TCCR2==0)
 994:	85 b5       	in	r24, 0x25	; 37
 996:	88 23       	and	r24, r24
 998:	11 f0       	breq	.+4      	; 0x99e <Timer2_1ms_Init+0x4a>

/*a function to initialize compare match timer0 to 1 millisecond*/
TimerErrorStatus Timer2_1ms_Init(void)
{
	/*creating error flag*/
	uint8 Errorflag=TIM_ok;
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	08 95       	ret
	SetBit(TIM_SFIOR,SFIOR_PSR2);
	
	/*checking for the error flag*/
	if(TIM_TCCR2==0)
	{
		Errorflag=TIM_DelayError;
 99e:	85 e0       	ldi	r24, 0x05	; 5
	}
	/*returning the function status*/
	return Errorflag;
}
 9a0:	08 95       	ret

000009a2 <Timer2DelayNoInt>:
}


/*a delay funcion without interrupt 'using the counter register'*/
TimerErrorStatus Timer2DelayNoInt(uint32 DelayValue)
{
 9a2:	0f 93       	push	r16
 9a4:	1f 93       	push	r17
 9a6:	8b 01       	movw	r16, r22
 9a8:	9c 01       	movw	r18, r24
	/*creating a flag error*/
	uint8 Errorflag=TIM_ok;
	/*reseting the delay counter to 0*/
	DelayCounter1=0;
 9aa:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <DelayCounter1>
 9ae:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <DelayCounter1+0x1>
 9b2:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <DelayCounter1+0x2>
 9b6:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <DelayCounter1+0x3>
	/*reseting the counter register to 0*/
	TIM_TCNT2=0;
 9ba:	14 bc       	out	0x24, r1	; 36
	/*busy waiting as a delay*/
	while(2*DelayValue>DelayCounter1)
 9bc:	16 c0       	rjmp	.+44     	; 0x9ea <Timer2DelayNoInt+0x48>
	{
		/*if the counter equals 250 '0.5 milli second'*/
		if (TIM_TCNT2==250)
 9be:	84 b5       	in	r24, 0x24	; 36
 9c0:	8a 3f       	cpi	r24, 0xFA	; 250
 9c2:	99 f4       	brne	.+38     	; 0x9ea <Timer2DelayNoInt+0x48>
		{
			/*increment the delay counnter by 1*/
			DelayCounter1++;
 9c4:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <DelayCounter1>
 9c8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <DelayCounter1+0x1>
 9cc:	a0 91 bc 00 	lds	r26, 0x00BC	; 0x8000bc <DelayCounter1+0x2>
 9d0:	b0 91 bd 00 	lds	r27, 0x00BD	; 0x8000bd <DelayCounter1+0x3>
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	a1 1d       	adc	r26, r1
 9d8:	b1 1d       	adc	r27, r1
 9da:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <DelayCounter1>
 9de:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <DelayCounter1+0x1>
 9e2:	a0 93 bc 00 	sts	0x00BC, r26	; 0x8000bc <DelayCounter1+0x2>
 9e6:	b0 93 bd 00 	sts	0x00BD, r27	; 0x8000bd <DelayCounter1+0x3>
	/*reseting the delay counter to 0*/
	DelayCounter1=0;
	/*reseting the counter register to 0*/
	TIM_TCNT2=0;
	/*busy waiting as a delay*/
	while(2*DelayValue>DelayCounter1)
 9ea:	40 91 ba 00 	lds	r20, 0x00BA	; 0x8000ba <DelayCounter1>
 9ee:	50 91 bb 00 	lds	r21, 0x00BB	; 0x8000bb <DelayCounter1+0x1>
 9f2:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <DelayCounter1+0x2>
 9f6:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <DelayCounter1+0x3>
 9fa:	d9 01       	movw	r26, r18
 9fc:	c8 01       	movw	r24, r16
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	aa 1f       	adc	r26, r26
 a04:	bb 1f       	adc	r27, r27
 a06:	48 17       	cp	r20, r24
 a08:	59 07       	cpc	r21, r25
 a0a:	6a 07       	cpc	r22, r26
 a0c:	7b 07       	cpc	r23, r27
 a0e:	b8 f2       	brcs	.-82     	; 0x9be <Timer2DelayNoInt+0x1c>
			/*increment the delay counnter by 1*/
			DelayCounter1++;
		}
	}
	/*checking for the error flag*/
	if(TIM_TCNT2==0)
 a10:	84 b5       	in	r24, 0x24	; 36
 a12:	88 23       	and	r24, r24
 a14:	11 f0       	breq	.+4      	; 0xa1a <Timer2DelayNoInt+0x78>

/*a delay funcion without interrupt 'using the counter register'*/
TimerErrorStatus Timer2DelayNoInt(uint32 DelayValue)
{
	/*creating a flag error*/
	uint8 Errorflag=TIM_ok;
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	01 c0       	rjmp	.+2      	; 0xa1c <Timer2DelayNoInt+0x7a>
		}
	}
	/*checking for the error flag*/
	if(TIM_TCNT2==0)
	{
		Errorflag=TIM_DelayError;
 a1a:	85 e0       	ldi	r24, 0x05	; 5
	}
	/*returning the function status*/
	return Errorflag;

}
 a1c:	1f 91       	pop	r17
 a1e:	0f 91       	pop	r16
 a20:	08 95       	ret

00000a22 <__vector_4>:
									/************************************************************************/

/*ISR FOR COMPARE MATCH OVERFLOW*/
void __vector_4 (void)		__attribute__((signal));
void __vector_4 (void)
{
 a22:	1f 92       	push	r1
 a24:	0f 92       	push	r0
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	0f 92       	push	r0
 a2a:	11 24       	eor	r1, r1
 a2c:	2f 93       	push	r18
 a2e:	3f 93       	push	r19
 a30:	4f 93       	push	r20
 a32:	5f 93       	push	r21
 a34:	6f 93       	push	r22
 a36:	7f 93       	push	r23
 a38:	8f 93       	push	r24
 a3a:	9f 93       	push	r25
 a3c:	af 93       	push	r26
 a3e:	bf 93       	push	r27
 a40:	ef 93       	push	r30
 a42:	ff 93       	push	r31
	if(GbTo_CTCtim!=NULLPTR)
 a44:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <GbTo_CTCtim>
 a48:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <GbTo_CTCtim+0x1>
 a4c:	30 97       	sbiw	r30, 0x00	; 0
 a4e:	09 f0       	breq	.+2      	; 0xa52 <__vector_4+0x30>
	{
		GbTo_CTCtim();
 a50:	09 95       	icall
	}

}
 a52:	ff 91       	pop	r31
 a54:	ef 91       	pop	r30
 a56:	bf 91       	pop	r27
 a58:	af 91       	pop	r26
 a5a:	9f 91       	pop	r25
 a5c:	8f 91       	pop	r24
 a5e:	7f 91       	pop	r23
 a60:	6f 91       	pop	r22
 a62:	5f 91       	pop	r21
 a64:	4f 91       	pop	r20
 a66:	3f 91       	pop	r19
 a68:	2f 91       	pop	r18
 a6a:	0f 90       	pop	r0
 a6c:	0f be       	out	0x3f, r0	; 63
 a6e:	0f 90       	pop	r0
 a70:	1f 90       	pop	r1
 a72:	18 95       	reti

00000a74 <__vector_5>:

/*ISR FOR TIMER OVERFLOW*/
void __vector_5 (void)		__attribute__((signal));
void __vector_5 (void)
{
 a74:	1f 92       	push	r1
 a76:	0f 92       	push	r0
 a78:	0f b6       	in	r0, 0x3f	; 63
 a7a:	0f 92       	push	r0
 a7c:	11 24       	eor	r1, r1
 a7e:	2f 93       	push	r18
 a80:	3f 93       	push	r19
 a82:	4f 93       	push	r20
 a84:	5f 93       	push	r21
 a86:	6f 93       	push	r22
 a88:	7f 93       	push	r23
 a8a:	8f 93       	push	r24
 a8c:	9f 93       	push	r25
 a8e:	af 93       	push	r26
 a90:	bf 93       	push	r27
 a92:	ef 93       	push	r30
 a94:	ff 93       	push	r31
	if(GbTo_TOVtim!=NULLPTR)
 a96:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <GbTo_TOVtim>
 a9a:	f0 91 b8 00 	lds	r31, 0x00B8	; 0x8000b8 <GbTo_TOVtim+0x1>
 a9e:	30 97       	sbiw	r30, 0x00	; 0
 aa0:	09 f0       	breq	.+2      	; 0xaa4 <__vector_5+0x30>
	{
		GbTo_TOVtim();
 aa2:	09 95       	icall
	}

}
 aa4:	ff 91       	pop	r31
 aa6:	ef 91       	pop	r30
 aa8:	bf 91       	pop	r27
 aaa:	af 91       	pop	r26
 aac:	9f 91       	pop	r25
 aae:	8f 91       	pop	r24
 ab0:	7f 91       	pop	r23
 ab2:	6f 91       	pop	r22
 ab4:	5f 91       	pop	r21
 ab6:	4f 91       	pop	r20
 ab8:	3f 91       	pop	r19
 aba:	2f 91       	pop	r18
 abc:	0f 90       	pop	r0
 abe:	0f be       	out	0x3f, r0	; 63
 ac0:	0f 90       	pop	r0
 ac2:	1f 90       	pop	r1
 ac4:	18 95       	reti

00000ac6 <_exit>:
 ac6:	f8 94       	cli

00000ac8 <__stop_program>:
 ac8:	ff cf       	rjmp	.-2      	; 0xac8 <__stop_program>
